{"version":3,"sources":["components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","useState","quote","setQuote","currentQuote","setCurrentQuote","useEffect","a","fetch","result","json","fetchResults","id","className","text","author","href","target","TwitterOutlined","onClick","Math","floor","random","length","RightOutlined","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kQAiDeA,EA5CE,WAEf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAiBA,OAfAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACqBC,MAAM,+BAD3B,cACMC,EADN,gBAEiBA,EAAOC,OAFxB,OAEED,EAFF,OAGEN,EAASM,GACTJ,EAAgBI,EAAO,KAJzB,4CADc,uBAAC,WAAD,wBAOdE,KACC,IAQD,oCAEGP,GACE,yBAAKQ,GAAG,YAAYC,UAAU,sCAC7B,yBAAKD,GAAG,QAAQR,EAAaU,MAC7B,yBAAKF,GAAG,UAAR,KAAoBR,EAAaW,OAASX,EAAaW,OAAS,aAChE,yBAAKH,GAAG,YACN,uBAAGA,GAAG,cAAcI,KAAI,iEAA4DZ,EAAaU,KAAzE,aAAkFV,EAAaW,OAASX,EAAaW,OAAS,aAAeE,OAAO,UAC1K,kBAACC,EAAA,EAAD,OAEF,4BAAQN,GAAG,YAAYO,QAAS,WAC9Bd,EAAgBH,EAhBnBkB,KAAKC,MAAOD,KAAKE,WAAapB,EAAMqB,OAAU,OAiB1C,kBAACC,EAAA,EAAD,WC5BAC,MANf,WACE,OACI,kBAAC,EAAD,OCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5ac6f74e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TwitterOutlined,RightOutlined } from '@ant-design/icons';\nimport '../App.scss';\n\n\nconst QuoteBox = () => {\n\n  const [quote, setQuote] = useState([]);\n  const [currentQuote, setCurrentQuote] = useState(null);\n\n  useEffect(() => {\n    async function fetchResults() {\n      let result = await fetch(\"https://type.fit/api/quotes\");\n      result = await result.json();\n      setQuote(result);\n      setCurrentQuote(result[15])\n    }\n    fetchResults();\n  }, [])\n\n  function randomQuoteIndex() {\n    return Math.floor((Math.random() * --quote.length) + 0)\n\n  }\n\n  return (\n    <>\n\n      {currentQuote &&\n        (<div id=\"quote-box\" className=\"animate__animated animate__flipInX\">\n          <div id=\"text\">{currentQuote.text}</div>\n          <div id=\"author\">- {currentQuote.author ? currentQuote.author : 'Anonymous'}</div>\n          <div id=\"controls\">\n            <a id=\"tweet-quote\" href={`https://twitter.com/intent/tweet?hashtags=quotes&text=\"${currentQuote.text}\" ${currentQuote.author ? currentQuote.author : 'Anonymous'}`} target=\"_blank\" >\n              <TwitterOutlined />\n            </a>\n            <button id=\"new-quote\" onClick={() => {\n              setCurrentQuote(quote[randomQuoteIndex()]);\n            }}><RightOutlined /></button>\n\n          </div>\n        </div>)\n      }\n\n\n    </>\n  )\n}\n\nexport default QuoteBox","import React from 'react';\nimport './App.scss';\nimport QuoteBox from './components/QuoteBox'\n\nfunction App() {\n  return (\n      <QuoteBox/>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}